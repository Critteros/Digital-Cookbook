name: javaflavors-front

x-pg-db-credentials: &pg-db-credentials
  POSTGRES_USER: ${DB_USER:-postgres}
  POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
  POSTGRES_DB: ${DB_NAME:-device-manager-front}

x-oidc-settings: &oidc-settings
  OIDC_AUTHORIZE_URL: ${OIDC_AUTHORIZE_URL}
  OIDC_TOKEN_URL: ${OIDC_TOKEN_URL}
  OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
  OIDC_CLIENT_SECRET: ${OIDC_CLIENT_SECRET}

x-node-server-extra: &node-server-extra
  DB_HOST: ${DB_HOST:-postgres}
  DB_PORT: ${DB_PORT:-5432}
  DB_USER: ${DB_USER:-postgres}
  DB_PASSWORD: ${DB_PASSWORD:-postgres}
  DB_NAME: ${DB_NAME:-device-manager-front}
  PUBLIC_API_URL: ${PUBLIC_API_URL}

x-application-port-mapping: &application-port-mapping
  - ${PORT:-8000}:3000

services:
  postgres:
    image: postgres:latest
    environment:
      <<: *pg-db-credentials
    volumes:
      - javaflavors-front-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 2s
      timeout: 5s
      retries: 5

  application:
    image: javaflavors-front:latest
    build:
      context: .
      dockerfile: Dockerfile
    pull_policy: build
    environment:
      <<: [*pg-db-credentials, *oidc-settings, *node-server-extra]
    ports: *application-port-mapping
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  javaflavors-front-db-data:
